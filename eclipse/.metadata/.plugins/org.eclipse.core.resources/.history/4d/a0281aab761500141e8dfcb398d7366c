package com.callumhutchy.runecraft2.client.gui;

import handler.ExtendedPlayer;

import java.awt.Image;

import javax.swing.ImageIcon;

import org.lwjgl.input.Keyboard;
import org.lwjgl.opengl.GL11;

import com.callumhutchy.runecraft2.Runecraft2;

import net.minecraft.client.gui.Gui;
import net.minecraft.client.gui.GuiButton;
import net.minecraft.client.gui.GuiScreen;
import net.minecraft.client.gui.inventory.GuiContainer;
import net.minecraft.entity.DataWatcher;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.inventory.Container;
import net.minecraft.util.IIcon;
import net.minecraft.util.ResourceLocation;
import net.minecraftforge.client.event.GuiScreenEvent.ActionPerformedEvent;
import net.minecraftforge.common.MinecraftForge;

public class GuiSpellBook extends GuiScreen {

	private static final ResourceLocation	resourceLocation			= new ResourceLocation("runecraft2:textures/gui/spellbook.png");
	public static final int					GUI_ID						= 20;

	private static final int				SPELL_ICON_SIZE				= 16;
	private static final int				SPELL_ICON_SPACING			= SPELL_ICON_SIZE + 4;
	private static final int				SPELL_ICON_BASE_U_OFFSET	= 0;
	private static final int				SPELL_ICON_BASE_V_OFFSET	= 198;
	private static final int				SPELL_ICONS_PER_ROW			= 11;
	protected static final ResourceLocation	widgetTextures				= new ResourceLocation("runecraft2:textures/gui/spells.png");

	public boolean							airstrikeselected,
			hometeleportselected, waterstrikeselected, earthstrikeselected,
			firestrikeselected = false;

	int										xSize						= 256;
	int										ySize						= 256;
	int										xStart						= (width / 2) - (xSize / 2);
	int										yStart						= (height / 2) - (ySize / 2);
	int										iconyStart					= yStart + 22;
	int										iconxStart					= xStart + 17;

	int										asminx, asmaxx, asminy, asmaxy;
	int										htminx, htmaxx, htminy, htmaxy;
	int										wsminx, wsmaxx, wsminy, wsmaxy;

	public void initGui() {

		Keyboard.enableRepeatEvents(true);
		this.buttonList.clear();
		// this.buttonList.add(this.doneBtn = new GuiButton(1, this.width / 2 -
		// 100, this.height / 4 + 96 + 12, I18n.func_135053_a("gui.done")));
		// this.codeTextField = new GuiTextField(this.fontRenderer, this.width /
		// 2 - 150, 60, 300, 20);
		// this.codeTextField.setMaxStringLength(32767);
		// this.codeTextField.setFocused(true);
	}

	protected void actionPerformed(GuiButton par1GuiButton) {
		switch (par1GuiButton.id) {
		case 1:
			this.mc.displayGuiScreen((GuiScreen) null);
			this.mc.setIngameFocus();

			break;
		}
	}

	public void drawScreen(int par1, int par2, float par3) {
		int xSize = 256;
		int ySize = 256;
		int xStart = (width / 2) - (xSize / 2);
		int yStart = (height / 2) - (ySize / 2);
		int iconyStart = yStart + 22;
		int iconxStart = xStart + 17;
		this.drawCenteredString(this.fontRendererObj, "Spellbook:", this.width / 2, (this.height / 2) - (ySize / 2) - 20, 16777215);
		// this.codeTextField.drawTextBox();
		this.drawBackground(0);
		this.doesGuiPauseGame();

		this.drawSkills();
		super.drawScreen(par1, par2, par3);
	}

	public void drawBackground(int p_146278_1_) {
		int xSize = 256;
		int ySize = 256;
		int xStart = (width / 2) - (xSize / 2);
		int yStart = (height / 2) - (ySize / 2);

		GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
		this.mc.getTextureManager().bindTexture(resourceLocation);
		this.drawTexturedModalRect(xStart, yStart, 0, 0, xSize, ySize);
	}

	public boolean doesGuiPauseGame(boolean var1) {
		return false;

	}

	public void drawSkills() {
		int xSize = 256;
		int ySize = 256;
		int xStart = (width / 2) - (xSize / 2);
		int yStart = (height / 2) - (ySize / 2);
		int iconyStart = yStart + 22;
		int iconxStart = xStart + 17;
		ExtendedPlayer props = ExtendedPlayer.get(this.mc.thePlayer);
		DataWatcher dw = this.mc.thePlayer.getDataWatcher();
		int MagicLevel = dw.getWatchableObjectInt(20);
		String currentSpell = props.currentSpell;

		System.out.println(airstrikeselected);

		if (MagicLevel >= 0) {

			if (!airstrikeselected || currentSpell != "airstrike") {
				mc.getTextureManager().bindTexture(this.widgetTextures);
				this.drawTexturedModalRect(iconxStart, iconyStart, 0, 0, 16, 16);
				GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);

				asminx = iconxStart;
				asmaxx = iconxStart + 16;
				asminy = iconyStart;
				asmaxy = iconyStart + 16;
				System.out.println(currentSpell);
			}
			if (airstrikeselected || currentSpell == "airstrike") {
				mc.getTextureManager().bindTexture(this.widgetTextures);
				this.drawTexturedModalRect(iconxStart, iconyStart, 0, 16, 16, 16);
				airstrikeselected = true;
				hometeleportselected = false;
				waterstrikeselected = false;
				GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
				asminx = iconxStart;
				asmaxx = iconxStart + 16;
				asminy = iconyStart;
				asmaxy = iconyStart + 16;
				System.out.println(currentSpell);
			}
			if (!hometeleportselected || currentSpell != "hometeleport") {
				mc.getTextureManager().bindTexture(this.widgetTextures);
				this.drawTexturedModalRect(iconxStart + SPELL_ICON_SPACING, iconyStart, 64, 0, 16, 16);
				GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
				htminx = iconxStart + SPELL_ICON_SPACING;
				htmaxx = iconxStart + SPELL_ICON_SPACING + SPELL_ICON_SIZE;
				htminy = iconyStart;
				htmaxy = iconyStart + 16;
				System.out.println(currentSpell);
			}
			if (hometeleportselected || currentSpell == "hometeleport") {
				mc.getTextureManager().bindTexture(this.widgetTextures);
				this.drawTexturedModalRect(iconxStart + SPELL_ICON_SPACING, iconyStart, 64, 16, 16, 16);
				GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
				htminx = iconxStart + SPELL_ICON_SPACING;
				htmaxx = iconxStart + SPELL_ICON_SPACING + SPELL_ICON_SIZE;
				htminy = iconyStart;
				htmaxy = iconyStart + 16;
				airstrikeselected = false;
				waterstrikeselected = false;
				System.out.println(currentSpell);
			}

		}
		if (MagicLevel >= 2) {
			if (!waterstrikeselected || currentSpell != "waterstrike") {
				mc.getTextureManager().bindTexture(this.widgetTextures);
				this.drawTexturedModalRect(iconxStart + SPELL_ICON_SPACING * 2, iconyStart, 16, 0, 16, 16);
				GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
				wsminx = iconxStart + (SPELL_ICON_SPACING * 2);
				wsmaxx = iconxStart + (SPELL_ICON_SPACING * 2) + SPELL_ICON_SIZE;
				wsminy = iconyStart;
				wsmaxy = iconyStart + 16;
			}
			if (waterstrikeselected || currentSpell == "waterstrike") {
				mc.getTextureManager().bindTexture(this.widgetTextures);
				this.drawTexturedModalRect(iconxStart + SPELL_ICON_SPACING * 2, iconyStart, 16, 16, 16, 16);
				GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
				airstrikeselected = hometeleportselected = false;
				wsminx = iconxStart + (SPELL_ICON_SPACING * 2);
				wsmaxx = iconxStart + (SPELL_ICON_SPACING * 2) + SPELL_ICON_SIZE;
				wsminy = iconyStart;
				wsmaxy = iconyStart + 16;
			}
		}
		if (props.currentMagicLevel > 5) {
			if (!earthstrikeselected) {
				mc.getTextureManager().bindTexture(this.widgetTextures);
				this.drawTexturedModalRect(iconxStart + SPELL_ICON_SPACING, iconyStart, 32, 0, 16, 16);
				GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
			}
			if (earthstrikeselected) {
				mc.getTextureManager().bindTexture(this.widgetTextures);
				this.drawTexturedModalRect(iconxStart + SPELL_ICON_SPACING, iconyStart, 32, 16, 16, 16);
				GL11.glColor4f(1.0F, 1.0F, 1.0F, 1.0F);
			}
		}
	}

	protected void mouseClicked(int varx, int vary, int p_73864_3_) {
		ExtendedPlayer props = ExtendedPlayer.get(this.mc.thePlayer);
		System.out.println("Mouse was click at x " + varx + " and y " + vary);
		if (asminx < varx && varx < asmaxx && asminy < vary && vary < asmaxy) {
			airstrikeselected = !airstrikeselected;
			System.out.println(airstrikeselected);
		}

		if (airstrikeselected) {
			props.currentSpell = "airstrike";
			hometeleportselected = false;
			waterstrikeselected = false;
		}
		if (!airstrikeselected) {
			props.currentSpell = "";
		}
		if (htminx < varx && varx < htmaxx && htminy < vary && vary < htmaxy) {
			hometeleportselected = !hometeleportselected;
		}
		if (hometeleportselected) {
			props.currentSpell = "hometeleport";
			airstrikeselected = false;
			waterstrikeselected = false;
		}
		if (wsminx < varx && varx < wsmaxx && wsminy < vary && vary < wsmaxy) {
			waterstrikeselected = !waterstrikeselected;
		}
		if (waterstrikeselected) {
			props.currentSpell = "waterstrike";
			airstrikeselected = false;
			hometeleportselected = false;
		}

	}

	protected void mouseMovedOrUp(int varx, int vary, int which) {
		if (asminx < varx && varx < asmaxx && asminy < vary && vary < asmaxy) {

			System.out.println("BOOOBS");
		}
		if (htminx < varx && varx < htmaxx && htminy < vary && vary < htmaxy) {
			System.out.println("TIIITTTIES");
		}
	}

	public boolean isWithinAirStrike(int varx, int vary) {
		if (asminx < varx && varx < asmaxx && asminy < vary && vary < asmaxy) {
			return true;
		}

		return false;

	}

	protected boolean IsButtonMouseovered(int varx, int vary, GuiButton button) {
		if (asminx < varx && varx < asmaxx && asminy < vary && vary < asmaxy) {

			System.out.println("BOOOBS");
		}
		if (htminx < varx && varx < htmaxx && htminy < vary && vary < htmaxy) {
			System.out.println("TIIITTTIES");
		}
		return true;
	}

}
